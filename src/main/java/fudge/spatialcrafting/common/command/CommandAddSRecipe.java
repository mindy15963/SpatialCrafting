package fudge.spatialcrafting.common.command;

import com.google.common.collect.ImmutableList;
import fudge.spatialcrafting.SpatialCrafting;
import fudge.spatialcrafting.common.crafting.RecipeAddition;
import fudge.spatialcrafting.common.crafting.SpatialRecipe;
import fudge.spatialcrafting.common.tile.TileCrafter;
import fudge.spatialcrafting.common.tile.util.CraftingInventory;
import fudge.spatialcrafting.common.util.CrafterUtil;
import fudge.spatialcrafting.common.util.MCConstants;
import fudge.spatialcrafting.common.util.SCConstants;
import fudge.spatialcrafting.network.PacketHandler;
import fudge.spatialcrafting.network.client.PacketAddRecipeToJei;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.PlayerNotFoundException;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.item.ItemStack;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.EnumHand;
import net.minecraft.util.text.TextComponentTranslation;
import net.minecraftforge.fml.common.Loader;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Collections;
import java.util.List;

public class CommandAddSRecipe extends SCCommand {

    public static final String RECIPES_FILE_NAME = "___generated_spatial_recipes___.zs";
    private static final List<String> ALIASES = ImmutableList.of("addrecipe", "ar");


    private static void addZsScript(String command) {
        try {
            final String SCRIPTS_DIR_NAME = "scripts";
            final String SC_DIR_NAME = "spatialcrafting";
            final String GENERATED_MESSAGE = "//***** This file was automatically generated by a Spatial Crafting command.  *****\n";

            // Go the the scripts folder
            File scriptsDir = new File(SCRIPTS_DIR_NAME);
            if (scriptsDir.isDirectory()) {
                // Go to the spatialcrafting folder(if it doesn't exist create a new one)
                File scDir = new File(scriptsDir + "/" + SC_DIR_NAME);
                if (!scDir.exists()) {
                    //noinspection ResultOfMethodCallIgnored
                    scDir.mkdir();
                }

                // If the file doesn't exist, create a new one.
                Path path = Paths.get(SCRIPTS_DIR_NAME + "/" + SC_DIR_NAME + "/" + RECIPES_FILE_NAME);
                List<String> lines = Collections.singletonList(GENERATED_MESSAGE);
                if (!path.toFile().exists()) {
                    Files.write(path, lines, Charset.forName("UTF-8"));
                }

                writeCommandToFile(command, path);


            } else {
                SpatialCrafting.LOGGER.error("Could not find scripts directory!");
            }

        } catch (IOException e) {
            SpatialCrafting.LOGGER.error("Unexpected error trying to write zenscript script for a spatialcrafting recipe!", e);
        }
    }

    private static void writeCommandToFile(String command, Path path) {
        try {
            Files.write(path, command.getBytes(), StandardOpenOption.APPEND);
        } catch (IOException e) {
            SpatialCrafting.LOGGER.error("Unexpected error trying to add text to a zenscript script for a spatialcrafting recipe via acommand!",
                    e);
        }
    }

    private static boolean isValidRecipe(CraftingInventory input, ItemStack output, @Nonnull EntityPlayerMP player) {


        if (input.isEmpty()) {
            player.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.empty_crafter", 0));
            return false;
        }

        // If the player is holding nothing, and the output is just air
        if (output.equals(ItemStack.EMPTY)) {
            player.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.empty_hand", 0));
            return false;
        }

        return true;


    }

    @Override
    @Nonnull
    public List<String> getAliases() {
        return ALIASES;
    }

    @Override
    @Nonnull
    public String getName() {
        return "Add Spatial Recipe";
    }

    @Override
    @Nonnull
    public String getUsage(@Nonnull ICommandSender sender) {
        return "/sc addrecipe [exact/wildcard/oredict] [craftTime]";
    }

    @Override
    public void execute(@Nonnull MinecraftServer server, @Nonnull ICommandSender sender, @Nonnull String[] args) {
        addSpatialRecipe(server, sender, args, true);


    }

    public void addSpatialRecipe(@Nonnull MinecraftServer server, @Nonnull ICommandSender sender, @Nonnull String[] args, boolean shaped) {
        // Only works in single player
        if (server.isDedicatedServer()) {
            sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.dedis_only", 0));
            return;
        }

        TileCrafter crafter = CrafterUtil.getClosestMasterBlock(sender.getEntityWorld(), sender.getPosition());

        try {
            // Get output from player's hand
            EntityPlayerMP player = getCommandSenderAsPlayer(sender);
            ItemStack output = player.getHeldItem(EnumHand.MAIN_HAND);

            if (crafter == null) {
                sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.no_crafters", 0));
                return;
            }


            CraftingInventory input = crafter.getCraftingInventory();

            if (isValidRecipe(input, output, player)) {

                RecipeAddition recipeAdditionType = getRecipeAdditionType(args, sender);
                if (recipeAdditionType == null) return;

                // Default craft time
                int craftTime = input.getCubeSize() * SCConstants.DEFAULT_CRAFT_TIME_MULTIPLIER;

                boolean customTime = false;
                if (args.length >= 3) {
                    try {
                        craftTime = Math.round(Float.parseFloat(args[2]) * MCConstants.TICKS_PER_SECOND);
                        customTime = true;
                    } catch (NumberFormatException e) {
                        sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.layer.not_a_number", args[2]));
                        return;
                    }
                }


                validateRecipeAndAdd(sender, shaped, player, output, input, recipeAdditionType, craftTime, customTime,SpatialRecipe.DEFAULT_ENERGY_COST);


            }


        } catch (PlayerNotFoundException e) {
            SpatialCrafting.LOGGER.error("You're not supposed to use this with a command block!", e);
        }
    }

    private void validateRecipeAndAdd(@Nonnull ICommandSender sender, boolean shaped, EntityPlayerMP player, ItemStack output, CraftingInventory input, RecipeAddition recipeAdditionType, int craftTime, boolean customTime, int customEnergyCost) {
        try {
            SpatialRecipe recipe = SpatialRecipe.getRecipeFromItemStacks(input, output, recipeAdditionType, craftTime, shaped,customEnergyCost);

            // Writes some code in ZS that adds the corresponding recipe. Who needs programmers in our day and age?
            final String METHOD_NAME = shaped ? "addRecipe" : "addShapeless";
            String command = "mods.spatialcrafting." + METHOD_NAME + "(" + recipe.toFormattedString(customTime) + ");\n\n";

            if (SpatialRecipe.noRecipeConflict(recipe, sender)) {
                addRecipe(sender, player, output, recipe, command, shaped);
            }


        } catch (UnsupportedOperationException e) {
            // If the user did oredict and there are too many oredicts we face a problem (recipe will be null)
            sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.too_many_oredicts", 0));
        }
    }


    private void addRecipe(@Nonnull ICommandSender sender, EntityPlayerMP player, ItemStack output, SpatialRecipe recipe, String command, boolean shaped) {
        addZsScript(command);
        SpatialRecipe.addRecipe(recipe);
        if (Loader.isModLoaded(SCConstants.JEI_MOD_ID)) {
            PacketHandler.getNetwork().sendTo(new PacketAddRecipeToJei(recipe), player);
        }


        if (shaped) {
            if (output.getCount() == 1) {
                sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.success", output.getDisplayName()));
            } else {
                sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.success_num",
                        output.getCount(),
                        output.getDisplayName()));
            }
        } else {
            if (output.getCount() == 1) {
                sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_shapeless.success", output.getDisplayName()));
            } else {
                sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_shapeless.success_num",
                        output.getCount(),
                        output.getDisplayName()));
            }
        }
    }

    @Nullable
    private RecipeAddition getRecipeAdditionType(String[] words, ICommandSender sender) {
        // Default
        RecipeAddition recipeAdditionType = RecipeAddition.WILDCARD;

        // Do different recipe additions depending on the input
        if (words.length >= 2) {
            switch (words[1].toLowerCase()) {
                case "exact":
                case "ex":
                    recipeAdditionType = RecipeAddition.EXACT;
                    break;
                case "wildcard":
                case "*":
                    recipeAdditionType = RecipeAddition.WILDCARD;
                    break;
                case "oredict":
                case "od":
                    recipeAdditionType = RecipeAddition.OREDICT;
                    break;
                default:
                    sender.sendMessage(new TextComponentTranslation("commands.spatialcrafting.add_recipe.invalid_argument", 0));
                    return null;

            }
        }

        return recipeAdditionType;
    }

    @Override
    public int getRequiredPermissionLevel() {
        return MCConstants.HIGHEST;
    }

    @Override
    public boolean checkPermission(MinecraftServer server, ICommandSender sender) {
        return sender.canUseCommand(this.getRequiredPermissionLevel(), this.getName());
    }


    @Override
    public String description() {
        return "commands.spatialcrafting.add_recipe.description";
    }

    @Override
    public int maxArgs() {
        return 2;
    }


}
